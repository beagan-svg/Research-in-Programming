# /Users/beagannguy/desktop/BME_160
# Name: Beagan Nguy(bnguy)
# Group Members: none
# Calculate the physical - chemical properties of a protein sequence

"""
  Input amino acid sequence: VLSPADKTNVKAAW 
  Outputs: The number of amino acids, the molecular weight, molar
  Extinction coefficient, mass Extinction coefficient, theoretical isoelectric points,
  and the amino acid composition, all in this format.
    Number of Amino Acids: 14
    Molecular Weight: 1499.7
    molar Extinction coefficient: 5500.00
    mass Extinction coefficient: 3.67
    Theoretical pI: 9.88
    Amino acid composition:
    A = 21.43%
    C = 0.00%
    D = 7.14%
    E = 0.00%
    F = 0.00%
    G = 0.00%
    H = 0.00%
    I = 0.00%
    K = 14.29%
    L = 7.14%
    M = 0.00%
    N = 7.14%
    P = 7.14%
    Q = 0.00%
    R = 0.00%
    S = 7.14%
    T = 7.14%
    V = 14.29%
    W = 7.14%
    Y = 0.00%
  The program also filters all the non amino acids that are not in the table from the input sequence
"""

class ProteinParam :
# These tables are for calculating:
#     molecular weight (aa2mw), along with the mol. weight of H2O (mwH2O)
#     absorbance at 280 nm (aa2abs280)
#     pKa of positively charged Amino Acids (aa2chargePos)
#     pKa of negatively charged Amino acids (aa2chargeNeg)
#     and the constants aaNterm and aaCterm for pKa of the respective termini
#  Feel free to move these to appropriate methods as you like

# As written, these are accessed as class attributes, for example:
# ProteinParam.aa2mw['A'] or ProteinParam.mwH2O

    aa2mw = {
        'A': 89.093,  'G': 75.067,  'M': 149.211, 'S': 105.093, 'C': 121.158,
        'H': 155.155, 'N': 132.118, 'T': 119.119, 'D': 133.103, 'I': 131.173,
        'P': 115.131, 'V': 117.146, 'E': 147.129, 'K': 146.188, 'Q': 146.145,
        'W': 204.225,  'F': 165.189, 'L': 131.173, 'R': 174.201, 'Y': 181.189
        }

    mwH2O = 18.015
    aa2abs280= {'Y':1490, 'W': 5500, 'C': 125}

    aa2chargePos = {'K': 10.5, 'R':12.4, 'H':6}
    aa2chargeNeg = {'D': 3.86, 'E': 4.25, 'C': 8.33, 'Y': 10}
    aaNterm = 9.69
    aaCterm = 2.34

    def __init__ (self, protein):
        # Upper case the protein sequence
        upperProtein = str.upper(protein)
        
        # Creates an empty string
        self.str_Protein_Seq = ""
        
        # Filter letters that are not within the dictionary
        # by iterating through the sequence and if it matches with
        # one of the keys in the dictinary, it will be added to a string
        
        for aa in upperProtein:
            if aa in self.aa2mw.keys():
                self.str_Protein_Seq += aa
                
        # print(self.filter_Protein_Seq)
        #['V', 'L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W']

        # print(self.str_Protein_Seq)
        #VLSPADKTNVKAAW
        
        # Length of Amino Acids
        self.length = 0
        
        # Dictionary where key = aminoAcid and value = count
        self.aaDict = {}
        
        # Value of pH
        self.pH = 0
        
    # Returns count of Amino Acids
    def aaCount (self):
        self.length = len(self.str_Protein_Seq)
        return self.length

    # Returns the theoretical isolelectric point
    def pI (self):
        # Assign values to float and int
        precise_pH = 0.0
        best_Charge = 1000
        
        # Iterates through all the pH
        while (self.pH <= 14.01):
            temp_Charge = self._charge_()
            #print(tempCharge)
            
            # Finds the theoretical isoelectric point closest to 0
            # abs takes the absolute value
            if abs(temp_Charge) <= abs(best_Charge):
                precise_pH = self.pH
                best_Charge = temp_Charge
            self.pH += 0.01
       
        return precise_pH
    
    # Returns the counts of each Amino Acid in a dictionary
    def aaComposition (self) :
        for aminoAcid in self.aa2mw.keys():
            self.aaDict[aminoAcid] = self.str_Protein_Seq.count(aminoAcid)
        
        return self.aaDict
        """
        for key,val in self.aaDict.items():
            print (key, "=>", val)
        """
    # Returns the net charge of the protein at a particular pH    
    def _charge_ (self):
        # Assign values to float
        posCharge = 0.0
        negCharge = 0.0
        numerator = 0.0
        denominator = 0.0
        
        #VLSPADKTNVKAAW
        # Iterates through amino acid sequence and calculates the net sum of all 
        # those charges
        for aminoAcid in self.str_Protein_Seq:
            
            # Calculates the aa with positive charges
            if aminoAcid in self.aa2chargePos.keys():
                numerator = 10 ** self.aa2chargePos[aminoAcid]
                denominator = 10 ** self.aa2chargePos[aminoAcid] + (10 ** self.pH)
                posCharge += (numerator/denominator)
            
            # Calculates the aa with negative charges
            elif aminoAcid in self.aa2chargeNeg.keys():
                numerator = 10 ** self.pH
                denominator = 10 ** self.aa2chargeNeg[aminoAcid] + (10 ** self.pH)
                negCharge += (numerator/denominator)
        else:
            pass
        
        # Adds the aa(Nterm) to the positive charge
        posCharge += (10 ** self.aaNterm) / (10 ** self.aaNterm + 10 ** self.pH)
        
        # Adds the aa(Cterm) to the negative charge
        negCharge += (10 ** self.pH) / (10 ** self.aaCterm + 10 ** self.pH)
        
        # Calculates the net charge
        netCharge = posCharge - negCharge
        
        return netCharge
    
    # Return the amount of light a protein absorbs at a specific wavelength
    def molarExtinction (self):
        # Calculates the molar coefficient of typrosine, tryptophans, cysteines
        typrosine = self.str_Protein_Seq.count('Y') * self.aa2abs280.get('Y')
        tryptophans = self.str_Protein_Seq.count('W') * self.aa2abs280.get('W')
        cysteines = self.str_Protein_Seq.count('C') * self.aa2abs280.get('C')
        
        # Calculates the molarExtinction by summing the molar coefficient above
        molarExtinction = typrosine + tryptophans + cysteines
        return molarExtinction
        pass
    
    # Returns the Mass extinction coefficient 
    def massExtinction (self):
        myMW =  self.molecularWeight()
        return self.molarExtinction() / myMW if myMW else 0.0

    # Returns the total molecular weight of the Amino Acids excluding water
    def molecularWeight (self):
        # Assign values to int
        total_Weight = 0
        aa_Weight = 0
        waterLoss = 0
        
        # Weight of all AA
        for aminoAcid in self.str_Protein_Seq:
            aa_Weight += self.aa2mw.get(aminoAcid)
        
        # Weight of water loss 
        waterLoss = (self.length - 1) * self.mwH2O
       
        # Return net weight
        total_Weight = aa_Weight - waterLoss
        return total_Weight  
        pass

# Please do not modify any of the following.  This will produce a standard output that can be parsed
    
import sys
def main():
    inString = input('protein sequence?')
    while inString :
        myParamMaker = ProteinParam(inString)
        myAAnumber = myParamMaker.aaCount()
        print ("Number of Amino Acids: {aaNum}".format(aaNum = myAAnumber))
        print ("Molecular Weight: {:.1f}".format(myParamMaker.molecularWeight()))
        print ("molar Extinction coefficient: {:.2f}".format(myParamMaker.molarExtinction()))
        print ("mass Extinction coefficient: {:.2f}".format(myParamMaker.massExtinction()))
        print ("Theoretical pI: {:.2f}".format(myParamMaker.pI()))
        print ("Amino acid composition:")
        myAAcomposition = myParamMaker.aaComposition()
        keys = list(myAAcomposition.keys())   
        keys.sort()
        if myAAnumber == 0 : myAAnumber = 1  # handles the case where no AA are present 
        for key in keys :
            print ("\t{} = {:.2%}".format(key, myAAcomposition[key]/myAAnumber))
            
        inString = input('protein sequence?')

if __name__ == "__main__":
    main()
